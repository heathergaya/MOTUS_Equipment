plot(selected_area, add = T, col = "blue")
circle_point
circle_polygon
st_buffer
?st_buffer
st_crs(circle_point)
st_crs(circle_point) <- 4326
# Create a circular polygon based on the drawn circle
#sf_use_s2(FALSE) #put in planar
circle_point <- st_point(c(input$circle_long, input$circle_lat), dim = "XY")
?st_point
st_set_crs(circle_point)
st_set_crs(circle_point, 4326)
st_set_crs(circle_point, 4326)
?st_set_crs
circle_point
st_crs(circle_point)
st_crs(circle_point) <- st_set_crs(circle_point, 4326)
circle_point
str(circle_point)
st_transform(circle_point, 4326)
proj4string(circle_point)
st_sfc
str(circle_polygon)
plot(circle_polygon)
str(circle_point)
?st_buffer
# Convert the circular polygon into an sf object
### somehow buffer is wrong. Hmmmm.
circle_sf <- st_sf(geometry = st_sfc(circle_point, circle_polygon), crs = st_crs(4326))
circle_sf
plot(circle_sf)
circle_polygon <- st_buffer(circle_point, dist = cos(input$circle_radius)*69.17) #input$circle_radius * 1609.34) # Convert miles to meters
st_crs(circle_point) <- st_set_crs(circle_point, 4326)
st_buffer(circle_point, dist = cos(50)*69.17)
circle_polygon <- st_buffer(circle_point, dist = cos(50)*69.17)
#input$circle_radius * 1609.34) # Convert miles to meters
# Convert the circular polygon into an sf object
### somehow buffer is wrong. Hmmmm.
circle_sf <- st_sf(geometry = st_sfc(circle_point, circle_polygon), crs = st_crs(4326))
circle_sf
plot(circle_sf)
#input$circle_radius * 1609.34) # Convert miles to meters
# Convert the circular polygon into an sf object
### somehow buffer is wrong. Hmmmm.
circle_sf <- st_sf(geometry = st_sf(circle_polygon, crs = st_crs(4326))
return(circle_sf) # Convert miles to meters
#input$circle_radius * 1609.34) # Convert miles to meters
# Convert the circular polygon into an sf object
### somehow buffer is wrong. Hmmmm.
circle_sf <- st_sf(geometry = st_sf(circle_polygon), crs = st_crs(4326))
circle_polygon
str(circle_polygon)
st_sf(circle_polygon)
st_sf(geometry = circle_polygon, crs = st_crs(4326))
st_sfc(circle_point, crs = 4326) %>%
st_buffer(dist = input$circle_radius * 1609.34)
st_sfc(circle_point, crs = 4326) %>%
st_buffer(dist = 50 * 1609.34)
runApp('Downloads/AFF Carbon Tool.R')
runApp('Downloads/AFF Carbon Tool.R')
runApp('Downloads/Test_AFF_HLM.R')
runApp('Downloads/AFF Carbon Tool.R')
intersecting_points_rec
circle_sf
circle_polygon
circle_point
circle_radius
st_buffer(circle_point, dist = cos(50)*69.17)
circle_point
circle_polygon
cos(50)*69.17
runApp('Downloads/AFF Carbon Tool.R')
circle_polygon
circle_sf
plot(circle_sf)
intersecting_points_rec
rec_locs_sf
runApp('Downloads/AFF Carbon Tool.R')
rec_locs_sf
circle_sf
plot(rec_locs_sf)
library(shiny); runApp('Downloads/AFF Carbon Tool.R')
plot(rec_locs_sf)
str(rec_locs_sf)
plot(rec_locs_sf$geometry)
selected_area
circle_sf
selected_area <- circle_sf
st_intersect(rec_locs_sf, selected_area, sparse = F)
st_intersects(rec_locs_sf, selected_area, sparse = F)
plot(selected_area, add= T, col = "red")
circle_point
st_sfc(circle_point, crs = 4326) %>%
st_buffer(dist = cos(50)*69.17)
circleinput <- st_sfc(circle_point, crs = 4326) %>%
st_buffer(dist = cos(50)*69.17)
plot(circleinput, add = T, col = "blue")
plot(circleinput)
circleinput
points(circleinput)
circle_sf
circle_point
circle_polygon
cos(input$circle_radius)*69.17
st_sfc(circle_point, crs = 4326) %>%
st_buffer(dist = 50/69.17)
plot(st_sfc(circle_point, crs = 4326) %>%
st_buffer(dist = 50/69.17))
runApp('Downloads/AFF Carbon Tool.R')
circle_polygon
plot(curr_locs_sf)
plot(curr_locs_sf$geometry)
plot(st_sfc(circle_point, crs = 4326) %>%
st_buffer(dist = 50/69.17), add = T, col = "red")
plot(c(0,1), c(1,1))
plot(c(0,1), c(1,1))
library(shiny); runApp('Downloads/AFF Carbon Tool.R')
runApp('Downloads/AFF Carbon Tool.R')
plot(rec_locs_sf$geometry)
points(circle_point, col = "red")
plot(circle_point, col = 'red', add = T)
plot(circle_sf, add = T, col = "blue")
plot(circle_sf, col = "blue")
plot(circle_point, col = 'red', add = T)
plot(rec_locs_sf$geometry, add = T)
selected_area <- circle_sf
selected_area
curr_locs_sf
st_intersects(curr_locs_sf, selected_area, sparse = FALSE)
# Subsetting for current locations
intersecting_points_curr <- st_intersects(curr_locs_sf, selected_area, sparse = FALSE) %>%
apply(1, function(row) any(row == TRUE))
intersecting_points_curr
subsetted_curr_locs <- curr_locs_sf[intersecting_points_curr, ]
subsetted_curr_locs
subsetted_prev_locs
# Add latitude and longitude columns for each dataset
processLocations <- function(df) {
if (!is.null(df) && nrow(df) > 0) {
coords <- st_coordinates(df)
df$lat <- coords[,2]  # Latitude
df$lon <- coords[,1]  # Longitude
}
return(df)
}
processLocations(subsetted_rec_locs)
plot(processLocations(subsetted_rec_locs))
processLocations(subsetted_rec_locs)
nrow(subsetted_rec_locs)
df <- subsetted_rec_locs
st_coordinates(df)
str(df)
runApp('Downloads/AFF Carbon Tool.R')
runApp('Downloads/AFF Carbon Tool.R')
library(shiny); runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
## Only run this example in interactive R sessions
if (interactive()) {
ui <- navbarPage("Navbar page", id = "tabs",
tabPanel("Home",
actionButton("hideTab", "Hide 'Foo' tab"),
actionButton("showTab", "Show 'Foo' tab"),
actionButton("hideMenu", "Hide 'More' navbarMenu"),
actionButton("showMenu", "Show 'More' navbarMenu")
),
tabPanel("Foo", "This is the foo tab"),
tabPanel("Bar", "This is the bar tab"),
navbarMenu("More",
tabPanel("Table", "Table page"),
tabPanel("About", "About page"),
"------",
"Even more!",
tabPanel("Email", "Email page")
)
)
server <- function(input, output, session) {
observeEvent(input$hideTab, {
hideTab(inputId = "tabs", target = "Foo")
})
observeEvent(input$showTab, {
showTab(inputId = "tabs", target = "Foo")
})
observeEvent(input$hideMenu, {
hideTab(inputId = "tabs", target = "More")
})
observeEvent(input$showMenu, {
showTab(inputId = "tabs", target = "More")
})
}
shinyApp(ui, server)
}
?navbarPage
??navbarPage
library(shiny)
## Only run this example in interactive R sessions
if (interactive()) {
ui <- navbarPage("Navbar page", id = "tabs",
tabPanel("Home",
actionButton("hideTab", "Hide 'Foo' tab"),
actionButton("showTab", "Show 'Foo' tab"),
actionButton("hideMenu", "Hide 'More' navbarMenu"),
actionButton("showMenu", "Show 'More' navbarMenu")
),
tabPanel("Foo", "This is the foo tab"),
tabPanel("Bar", "This is the bar tab"),
navbarMenu("More",
tabPanel("Table", "Table page"),
tabPanel("About", "About page"),
"------",
"Even more!",
tabPanel("Email", "Email page")
)
)
server <- function(input, output, session) {
observeEvent(input$hideTab, {
hideTab(inputId = "tabs", target = "Foo")
})
observeEvent(input$showTab, {
showTab(inputId = "tabs", target = "Foo")
})
observeEvent(input$hideMenu, {
hideTab(inputId = "tabs", target = "More")
})
observeEvent(input$showMenu, {
showTab(inputId = "tabs", target = "More")
})
}
shinyApp(ui, server)
}
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Toggle Hidden Item Example"),
dashboardSidebar(
sidebarMenu(
menuItem("Visible Item", tabName = "visible"),
menuItem("Hidden Item", tabName = "hidden", id = "hidden_item", hidden = TRUE,
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
),
actionButton("toggle_hidden", "Toggle Hidden Item")
),
dashboardBody(
tags$script(HTML("
$(document).ready(function(){
// Initially hide the hidden item
$('#hidden_item').hide();
// Toggle the hidden item when the button is clicked
$('#toggle_hidden').click(function(){
$('#hidden_item').toggle(); // Toggle the visibility of the hidden item
});
});
"))
)
)
server <- function(input, output, session) {
# Server logic goes here
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Toggle Hidden Item Example"),
dashboardSidebar(
sidebarMenu(
menuItem("Visible Item", tabName = "visible"),
tags$li(
class = "hidden_menu_item",
menuItem("Hidden Item", tabName = "hidden",
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
)
),
actionButton("toggle_hidden", "Toggle Hidden Item")
),
dashboardBody(
tags$script(HTML("
$(document).ready(function(){
// Initially hide the hidden menu item
$('.hidden_menu_item').hide();
// Toggle the hidden menu item when the button is clicked
$('#toggle_hidden').click(function(){
$('.hidden_menu_item').toggle(); // Toggle the visibility of the hidden menu item
});
});
"))
)
)
server <- function(input, output, session) {
# Server logic goes here
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Toggle Hidden Item Example"),
dashboardSidebar(
sidebarMenuOutput("menu")
),
dashboardBody(
actionButton("toggle_hidden", "Toggle Hidden Item"),
tags$script(HTML("
$(document).ready(function(){
$('#hidden_item').hide();
});
"))
)
)
server <- function(input, output, session) {
output$menu <- renderMenu({
sidebarMenu(
menuItem("Visible Item", tabName = "visible"),
conditionalPanel(
condition = "input.toggle_hidden > 0",
menuItem("Hidden Item", tabName = "hidden", id = "hidden_item",
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
)
)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Toggle Hidden Item Example"),
dashboardSidebar(
sidebarMenuOutput("sidebarmenu")
),
dashboardBody(
actionButton("showTab", "Show Hidden Item"),
tags$script(HTML("
$(document).ready(function(){
$('#hidden_item').hide();
});
"))
)
)
server <- function(input, output, session) {
output$sidebarmenu <- renderMenu({
sidebarMenu(
menuItem("About", tabName = "about", icon = icon("info-circle")),
menuItem("Build Your Station", tabName = "station_plan", icon = icon("screwdriver-wrench")),
menuItem("Supplies Needed", tabName = "supplies_needed", icon = icon("file-invoice-dollar")),
menuItem("Second Station", tabName = "station2_plan", icon = icon("screwdriver-wrench"), id = "hidden_item", hidden = TRUE)
)
})
observeEvent(input$showTab, {
shinyjs::runjs('$("#hidden_item").show();')
})
}
shinyApp(ui, server)
library(shiny); runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
subset(antenna_options, Frequency == 0)
ceiling
?ceiling
ceiling(.4)
ceiling(1.4)
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
str(antenna_options)
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
antenna_calcs$count_antenna
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
sum(1)
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
runApp('Documents/HH_LLC/SideProject_Unpaid/Motus_Equipment.R')
expected <- function(n, p){
return(n*p)
}
expected <- function(n, p){
return(n*p)
}
vr <- function(n,p){
return(n*p*(1-p))
}
rbinom(100, 1, .01)
rbinom(100, 1, .02)
lowp <- rbinom(100, 1, .02)
lowp <- rbinom(10, 100, .02)
lowp
lown <- rbinom(10, 5, .3)
lown
lowp <- rbinom(4, 100, .02)
set.seed(1)
lowp <- rbinom(4, 100, .02)
lown <- rbinom(4, 4, .3)
lown <- rbinom(4, 4, .5)
set.seed(1)
lowp <- rbinom(4, 100, .02)
lown <- rbinom(4, 4, .5)
setwd("~/Documents/HH_LLC/SideProject_Unpaid/MOTUS_Equipment")
library(shiny); runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
dollar(1)
dollar(1) > 0
as.numeric(dollar(1)) > 0
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
setwd("~/Documents/HH_LLC/SideProject_Unpaid/MOTUS_Equipment")
structure_options <- read.csv("structure_options.csv")
structure_options <- read.csv("structure_options.csv")
structure_options$Cost <- as.numeric(sub('.', '',structure_options$Cost)) #get rid of dollar sign
structure_options
head(strucutre_options)
names(structure_options)
grep("guyed", "rohn_bracket_30")
grep("bracket", "rohn_bracket_30")
grep("guyed", "rohn_bracket_30")
length(grep("guyed", "rohn_bracket_30"))
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
names(structure_options)
head(structure_options[,1:10])
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
floor(towerheight/10 -1)
towerheight
towerheight
floor(2/10 -1)
max(floor(towerheight/10 -1), 0)
max(floor(2/10 -1), 0)
sqrt((towerheight^2)+((towerheight*0.7)^2))
round((towerheight^2)+((towerheight*0.7)^2))
round(sqrt((towerheight^2)+((towerheight*0.7)^2))
)
ceiling(sqrt((towerheight^2)+((towerheight*0.7)^2))
)
guylength <- (ceiling(sqrt((towerheight^2)+((towerheight*0.7)^2)), 1))*3+15
ceiling(sqrt((towerheight^2)+((towerheight*0.7)^2)))*3+15
ceiling(sqrt((30^2)+((30*0.7)^2)))*3+15
ceiling(sqrt((30^2)+((30*0.7)^2)))
6*8
50*FALSE
runApp('Motus_Equipment.R')
structure
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
runApp('Motus_Equipment.R')
